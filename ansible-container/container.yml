version: "2"
settings:
  vars_files:
    - config.yml
  conductor:
    # The Conductor container does the heavy lifting, and provides a portable
    # Python runtime for building your target containers. It should be derived
    # from the same distribution as you're building your target containers with.
    #base: "debian:stretch"
    #base: "ubuntu:xenial"
      base: "centos:7"
    # roles_path:   # Specify a local path containing Ansible roles
  volumes:      # Provide a list of volumes to mount
    - /rml/database-master:/rml/database-master
    - /rml/www-master:/usr/share/nginx/www-master
  environment:  # List or mapping of environment variables
    POSTGRES_PASSWORD: "{{ DP_PASS }}"
  #-  PATH: /usr/lib/postgresql/10/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/_usr/sbin:/_usr/bin:/_usr/local/sbin:/_usr/local/bin

  # Set the name of the project. Defaults to basename of the project directory.
  # For built services, concatenated with service name to form the built image name.
  project_name: RadicalMilitantLibrary

  # The deployment_output_path is mounted to the Conductor container, and the 
  # `run` and `deployment` commands then write generated Ansible playbooks to it.
  # deployment_output_path: ./ansible-deployment

  # When using the k8s or openshift engines, use the following to authorize with the API.
  # Values set here will be passed to the Ansible modules. Any file paths will be mounted
  # to the conductor container, allowing the `run` command to access the API.
  #k8s_auth:
    # path to a K8s config file
    #config_file:
    # name of a context found within the config file
    #context:
    # URL for accessing the K8s API
    #host:
    # An API authentication token
    #api_key:
    # Path to a ca cert file
    #ssl_ca_cert:
    # Path to a cert file
    #cert_file:
    # Path to a key file
    #key_file:
    # boolean, indicating if SSL certs should be validated
    #verify_ssl:

  # When using the k8s or openshift engines, use the following to set the namespace.
  # If not set, the project name will be used. For openshift, the namespace maps to a project,
  # and description and display_name are supported.
  #k8s_namespace:
  #  name:
  #  description:
  #  display_name:


services:
    #  database:
    #    from: "centos/postgresql-96-centos7"
    #    restart: always
    #    #entrypoint: [ "docker-entrypoint.sh" ]
    #    #command: ["postgres"]
    #    expose:
    #      - 5432
    #    roles:
    #      - rml.database
    #    enviroment:
    #      - POSTGRESQL_DATABASE: InfoCOM
    #      - POSTGRESQL_USER: webuser
    #      - POSTGRESQL_PASSWORD: "{{ webuser_password }}"
    #      - POSTGRESQL_ADMIN_PASSWORD: "{{ postgres_password }}"
  php_fpm:
    from: "centos"
    restart: always
    command: ["php-fpm"]
    expose:
      - 9001
    roles:
      - rml.php
    volumes:
      - /rml/www-master:/usr/share/nginx/www-master
  web:
    from: "centos"
    restart: always
    entrypoint: [ "nginx", "-g", "daemon off;" ]
    expose:
      - 80
    ports:
      - "80:80"
      - "443:443"
    external_links:
      - php_fpm
    depends_on:
      - php_fpm
    roles:
      - rml.web
      - rml.nginx
    volumes:
      - /rml/www-master:/usr/share/nginx/www-master
  tor:
    from: "centos"
    restart: always
    entrypoint: ["pyentrypoint"]
    #    command: [ "su -tor" ]
    environment:
      HOME: /var/lib/tor
      USER: tor
      WEB_PORTS: 80:80
      WEB_SERVICE_NAME: RML
    links:
      - web
    depends_on:
      - web
    roles:
      - rml.tor
    volumes:
      - /var/lib/tor/hidden_service
registries: {}
