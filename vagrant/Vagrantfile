# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  #config.vm.box = "bento/debian-9"
  config.vm.box = "centos/7"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 9000, host: 9000
  config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 443, host: 8443

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "../", "/vagrant_data", type: "virtualbox"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  docker_disk = './disks/docker_disk.vdi'
  postgres_disk = './disks/postgres_disk.vdi'

  config.vm.provider "virtualbox" do |vb|
  #      unless File.exist?(docker_disk)
  #        vb.customize ['createhd', '--filename', docker_disk, '--size', 15 * 1024]
  #      end

  #      unless File.exist?(postgres_disk)
  #        vb.customize ['createhd', '--filename', postgres_disk, '--size', 3 * 1024]
  #      end
# #       if 0 == vb.showvminfo [ :id | grep -i "SATA Controller" | wc -l`
# #           vb.customize ['storagectl', :id, '--name', "SATA Controller", '--add', 'sata', '--controller', 'IntelAHCI']
# #       end
  #      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 1, '--device', 0, '--type', 'hdd', '--medium', docker_disk ]
  #      vb.customize ['storageattach', :id, '--storagectl', 'SATA Controller', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', postgres_disk ]
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
     vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end


  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #config.vm.provision :shell, path: "create_disk.sh"
  config.vm.provision :shell, path: "../prepare_local_system.sh"

  config.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = '2.0'
      ansible.playbook = "/vagrant_data/ansible/prepare.yml"
      ansible.limit = "localhost"
      ansible.inventory_path = "/vagrant_data/ansible/inventory"
  end
  config.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = '2.0'
      ansible.playbook = "/vagrant_data/ansible/setup_data.yml"
      ansible.limit = "localhost"
      ansible.inventory_path = "/vagrant_data/ansible/inventory"
  end
  config.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = '2.0'
      ansible.playbook = "/vagrant_data/ansible/setup_postgres.yml"
      ansible.limit = "localhost"
      ansible.inventory_path = "/vagrant_data/ansible/inventory"
  end

  config.vm.provision "shell", inline: <<-SHELL
    if [ 0 -eq "`sudo docker ps  --filter NAME=portainer | grep -v CONTAINER | wc -l`" ]
    then
        sudo docker volume create portainer_data
        sudo docker run -d --restart=always -p 9000:9000 -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data --name portainer portainer/portainer
    fi
  SHELL

  config.vm.provision "shell", inline: <<-SHELL
    cd /vagrant_data/ansible-container && sudo ansible-container stop
    cd /vagrant_data/ansible-container && sudo ansible-container build
    if [ 0 -eq "$?" ]
    then
        cd /vagrant_data/ansible-container && sudo ansible-container run
    fi
  SHELL

  config.vm.provision "shell", inline: <<-SHELL
    set -x
    docker exec -ti radicalmilitantlibrary_tor_1 onions
  SHELL
end
